global !p
def acc_spec_comm(snip, spec, comm_type):
    curr_class = vim.eval("get(b:, 'coc_current_function', '')")
    curr_class_stars = '*' * (len(curr_class) + 1)
    spec_stars = '*' * len(spec)
    types = comm_type[0]
    prolog_stars  = spec_stars + curr_class_stars
    class_spec = curr_class + ' ' + spec
    if types[0] == 't':
        snip.rv  = '/**' + prolog_stars + '********'
        snip    += ' * ' + class_spec   + ' types *'
        snip    += ' **' + prolog_stars + '*******/'
    elif types[0] == 'x':
        snip.rv  = '/**' + prolog_stars + '************'
        snip    += ' * ' + class_spec   + ' constants *'
        snip    += ' **' + prolog_stars + '***********/'
    elif types[0] == 'c':
        snip.rv  = '/**' + prolog_stars + '******************'
        snip    += ' * ' + class_spec   + ' classes/structs *'
        snip    += ' **' + prolog_stars + '*****************/'
    elif types[0] == 'v':
        snip.rv  = '/**' + prolog_stars + '*******************'
        snip    += ' * ' + class_spec   + ' member variables *'
        snip    += ' **' + prolog_stars + '******************/'
    elif types[0] == 'f':
        snip.rv  = '/**' + prolog_stars + '*******************'
        snip    += ' * ' + class_spec   + ' member functions *'
        snip    += ' **' + prolog_stars + '******************/'
    elif types[0] == 'p':
        snip.rv  = '/**' + prolog_stars + '********************'
        snip    += ' * ' + class_spec   + ' virtual functions *'
        snip    += ' **' + prolog_stars + '*******************/'
    elif types[0] == 'd':
        snip.rv  = '/**' + prolog_stars + '***************************'
        snip    += ' * ' + class_spec   + ' deleted member functions *'
        snip    += ' **' + prolog_stars + '**************************/'
    if len(types) != 1:
        snip.rv += '\n' + snip.mkline('', '')
    for i in range(1, len(types)):
        if types[i] == 't':
            snip += '/**' + prolog_stars + '********'
            snip += ' * ' + class_spec   + ' types *'
            snip += ' **' + prolog_stars + '*******/'
        elif types[i] == 'x':
            snip += '/**' + prolog_stars + '************'
            snip += ' * ' + class_spec   + ' constants *'
            snip += ' **' + prolog_stars + '***********/'
        elif types[i] == 'c':
            snip += '/**' + prolog_stars + '************************'
            snip += ' * ' + class_spec   + ' classes/structs/types *'
            snip += ' **' + prolog_stars + '***********************/'
        elif types[i] == 'v':
            snip += '/**' + prolog_stars + '*******************'
            snip += ' * ' + class_spec   + ' member variables *'
            snip += ' **' + prolog_stars + '******************/'
        elif types[i] == 'f':
            snip += '/**' + prolog_stars + '*******************'
            snip += ' * ' + class_spec   + ' member functions *'
            snip += ' **' + prolog_stars + '******************/'
        elif types[i] == 'p':
            snip += '/**' + prolog_stars + '********************'
            snip += ' * ' + class_spec   + ' virtual functions *'
            snip += ' **' + prolog_stars + '*******************/'
        elif types[i] == 'd':
            snip += '/**' + prolog_stars + '***************************'
            snip += ' * ' + class_spec   + ' deleted member functions *'
            snip += ' **' + prolog_stars + '**************************/'
        if i != len(types) - 1:
            snip.rv += '\n' + snip.mkline('', '')
endglobal

post_jump "if snip.tabstop == 3 and snip.tabstops[2].current_text == "": snip.buffer[snip.line + 2] = re.sub(" : ", "", snip.buffer[snip.line + 2])"
snippet cls "class" b
/**
 * @class $1
 * ${3:description}
 */
class ${1:name} : ${2:bases}
{$0
};
endsnippet

snippet cerr "cerr" b
std::cerr << $0 << std::endl;
endsnippet

snippet cout "cout" b
std::cout << $0 << std::endl;
endsnippet

snippet dox "/**" b
/**
 * $0
 */
endsnippet

snippet fh "file header" b
/**
 * @file `!p snip.rv = fn`
 * @brief ${1:brief description}
 * @author Kevin Wilson
 *
 * $Revision: $
 * $Date: $
 * $LastEditedBy: $
 *
 * $Copyright: `date '+%Y'`$
 **************************************************************************/$0
endsnippet

snippet hg "header guard" b
#ifndef ${1:`!p snip.rv = re.sub('(-|(?<!^)(?=[A-Z][a-z]))', '_', snip.basename).upper() + '_H'`}
#define $1

${VISUAL}$0

#endif  // $1
endsnippet

snippet itdef "iterator class" b
using value_type = value_type;
using difference_type = std::ptrdiff_t;
using pointer_const = const value_type*;
using pointer = value_type*;
using const_reference = const value_type&;
using reference = value_type&;
using size_type = size_type;

/// Implementation of a random access iterator.
struct iterator
{
    /*************************
     * iterator public types *
     ************************/

    using iterator_category = std::random_access_iterator_tag;
    using value_type = value_type;
    using difference_type = difference_type;
    using pointer = pointer;
    using reference = reference;

    /************************************
     * iterator public member variables *
     ***********************************/

    pointer m_pValue;

    /************************************
     * iterator public member functions *
     ***********************************/

    /// iterator constructor.
    iterator( pointer pValue = nullptr ) : m_pValue( pValue )
    {
    }

    /// Dereference operator.
    reference operator*() const
    {
        return *m_pValue;
    }

    /// Arrow dereference operator.
    pointer operator->() const
    {
        return &( operator*() );
    }

    /// Assignment operator.
    iterator& operator=( const iterator& other )
    {
        if( this == &other )
            return *this;

        m_pValue = other.m_pValue;
        return *this;
    }

    /// Prefix increment operator.
    iterator& operator++()
    {
        /* prefix ++ impl */
        return *this;
    }

    /// Prefix decrement operator.
    iterator& operator--()
    {
        /* prefix -- impl */
        return *this;
    }

    /// Postfix increment operator.
    iterator operator++( int )
    {
        iterator copyIt = *this;
        ++*this;
        return copyIt;
    }

    /// Postfix decrement operator.
    iterator operator--( int )
    {
        iterator copyIt = *this;
        --*this;
        return copyIt;
    }

    /// Equality comparison operator.
    bool operator==( const iterator& other ) const
    {
        return m_pValue == other.m_pValue;
    }

    /// Inequality comparison operator.
    bool operator!=( const iterator& other ) const
    {
        return m_pValue != other.m_pValue;
    }

    /// Less-than comparison operator.
    bool operator<( const iterator& other ) const
    {
        /* < impl */
    }

    /// Greater than comparison operator.
    bool operator>( const iterator& other ) const
    {
        return other < *this;
    }

    /// Less-than-or-equal comparison operator.
    bool operator<=( const iterator& other ) const
    {
        return !( other < *this );
    }

    /// Greater-than-or-equal comparison operator.
    bool operator>=( const iterator& other ) const
    {
        return !( *this < other );
    }

    /// Compound add difference_type and assign operator.
    iterator& operator+=( difference_type n )
    {
        if( n > 0 )
            /* += impl */
        else if( n < 0 )
            *this -= -n;

        return *this;
    }

    /// Add difference_type operator.
    iterator operator+( difference_type n ) const
    {
        return iterator( *this ) += n;
    }

    /// Compound subtract difference_type and assign operator.
    iterator& operator-=( difference_type n )
    {
        if( n > 0 )
            /* -= impl */
        else if( n < 0 )
            *this += -n;

        return *this;
    }

    /// Subtract difference_type operator.
    iterator operator-( difference_type n ) const
    {
        return iterator( *this ) -= n;
    }

    /// Subtract iterator operator.
    difference_type operator-( const iterator& other ) const
    {
        /* iterator - iterator impl */
    }

    /// Element access operator.
    reference operator[]( difference_type n ) const
    {
        return *( *this + n );
    }
};
using const_iterator = const iterator;
using reverse_iterator = std::reverse_iterator< iterator >;
using const_reverse_iterator = std::reverse_iterator< const_iterator >;
endsnippet

snippet logh "log header" b
/**
 * $Log: $
 **************************************************************************/$0
endsnippet

snippet ncdec "no copy declaration" b
${1:name}( $1 const& ) = delete;
$1& operator=( $1 const& ) = delete;$0
endsnippet

snippet ns "namespace" b
namespace ${1:name}
{
${VISUAL}$0
}  // namespace $1
endsnippet

snippet "priv([txcvfpd]+)?" "private access" br
`!p acc_spec_comm(snip, 'private', match.groups('txcvfpd'))`
endsnippet

snippet "prot([txcvfpd]+)?" "protected access" br
`!p acc_spec_comm(snip, 'protected', match.groups('txcvfpd'))`
endsnippet

snippet "pub([txcvfpd]+)?" "public access" br
`!p acc_spec_comm(snip, 'public', match.groups('txcvfpd'))`
endsnippet

post_jump "if snip.tabstop == 3 and snip.tabstops[2].current_text == "": snip.buffer[snip.line + 2] = re.sub(" : ", "", snip.buffer[snip.line + 2])"
snippet stru "struct" b
/**
 * @class $1
 * ${3:description}
 */
struct ${1:name} : ${2:bases}
{$0
};
endsnippet
